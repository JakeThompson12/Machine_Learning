import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Load data into a Pandas DataFrame
df = pd.read_csv(r'C:\Users\2586376t\NMR-Data1.csv')

# Separate features and target
X = df.drop('Experimental', axis=1)
y = df['Experimental']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define preprocessing steps
numeric_features = ['Hartree-Fock']
categorical_features = ['Method', 'Basis_Set', 'POM']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Preprocess the training data
X_train_preprocessed = preprocessor.fit_transform(X_train)

# Preprocess the testing data
X_test_preprocessed = preprocessor.transform(X_test)

# Build the model
model = keras.Sequential([
    layers.Dense(32, activation='relu', input_shape=(X_train_preprocessed.shape[1],)),
    layers.Dense(1)
])

model.compile(optimizer='adam', loss='mse')  # Mean Squared Error for regression

# Combine preprocessing and model into a single pipeline
model_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])

# Explicitly fit the entire pipeline
model_pipeline.fit(X_train, y_train)

# Train the model
model_pipeline.named_steps['model'].fit(X_train_preprocessed, y_train, epochs=50, batch_size=32, validation_data=(X_test_preprocessed, y_test))

# Evaluate the model
loss = model_pipeline.named_steps['model'].evaluate(X_test_preprocessed, y_test)
print(f'Mean Squared Error on Test Data: {loss}')

# Use the trained model to predict missing values
missing_data = pd.DataFrame({
    'Hartree-Fock': [50],
    'Method': ['BHAH'],
    'Basis_Set': ['TZP'],
    'POM': ['Keggin']
})

# Preprocess the missing data
missing_data_preprocessed = model_pipeline.named_steps['preprocessor'].transform(missing_data)

# Predict missing Experimental values
predicted_value = model_pipeline.named_steps['model'].predict(missing_data_preprocessed)
print(f'Predicted Value for Missing Experimental: {predicted_value}')
