import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

data=pd.read_csv(r'C:\Users\2586376t\NN-Opt-Distance.csv')

df = pd.DataFrame(data)

X = df.drop(['Distance', 'Diff', HF-Exchange'], axis=1)
y = df['Distance']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Model definition
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=500, batch_size=8, validation_split=0.2)

mse = model.evaluate(X_test, y_test)
print(f'Mean Squared Error on Test Data: {mse}')

predictions = model.predict(X_test)
results = pd.DataFrame({'Predicted': predictions.flatten()})
print(results)
